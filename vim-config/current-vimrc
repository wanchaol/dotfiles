" general config
set nocompatible
set ignorecase
set smartcase
set smarttab
set autoindent
set smartindent
set wrap                      "自动折行
set nu
set incsearch
set hlsearch
set showmatch
set mouse=a
" set selection=exclusive
set selection=inclusive
set selectmode=mouse,key
map <s-tab> :bnext<cr>
map <c-tab> :tabNext<cr>
set nobackup
set noswapfile
set clipboard=unnamed
set laststatus=2
set encoding=utf-8

syntax on

" set leaderkey
let mapleader=" "

" Automatic installation for vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdcommenter'

Plug 'vim-scripts/a.vim'
Plug 'rhysd/vim-clang-format'
Plug 'ervandew/supertab'
Plug 'Valloric/YouCompleteMe'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

Plug 'plytophogy/vim-virtualenv'

Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'jlanzarotta/bufexplorer'
"
Plug 'w0rp/ale'

Plug 'itchyny/lightline.vim'
Plug 'sheerun/vim-polyglot'

Plug 'terryma/vim-multiple-cursors'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
Plug 'junegunn/fzf.vim'
Plug 'mileszs/ack.vim'

Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-surround'

"colors configuration
"Plug 'fatih/molokai'
Plug 'altercation/vim-colors-solarized'

call plug#end()


" assuming you want to use ultisnips snippet engine
let g:UltiSnipsSnippetDirectories=['UltiSnips']
let g:UltiSnipsEditSplit="vertical"
" better key bindings for UltiSnipsExpandTrigger

let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"


" ycm config
" YCM must use the same Python version it's linked against
"let g:ycm_path_to_python_interpreter = '/usr/local/bin/python3'
let g:ycm_python_binary_path = 'python'
" Default ycm_extra_conf.py for fbcode
"let g:ycm_global_ycm_extra_conf = '/home/wanchaol/.vim/plugged/YouCompleteMe/ycm_extra_conf-cpp.py'


nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>

let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion=1

"" ultisnips config
"" make YCM compatible with UltiSnips (using supertab)
let g:ycm_use_ultisnips_completer = 1
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'


" vim-clang-format config
" autoformat enable
autocmd FileType c,cpp,cc,h,hpp ClangFormatAutoEnable
"  clang-format customization
let g:clang_format#style_options = {
            \ "AccessModifierOffset" : -4,
            \ "AllowShortIfStatementsOnASingleLine" : "true",
            \ "AlwaysBreakTemplateDeclarations" : "true",
            \ "Standard" : "C++11",
            \ "BreakBeforeBraces" : "Stroustrup"}


" Nerdtree settings
" configure the nerdtree window
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree
nnoremap <Leader>ft :NERDTreeTabsToggle<CR>

" fzf config
nnoremap <Leader>ff :Files<CR>
nnoremap <Leader>fb :ToggleBufExplorer<CR>
nnoremap <Leader>fh :History<CR>

" avoid ack output leak to terimal
function AckSearch(string) abort
  let saved_shellpipe = &shellpipe
  let &shellpipe = '>'
  try
    execute 'Ack!' shellescape(a:string, 1)
  finally
    let &shellpipe = saved_shellpipe
  endtry
endfunction

if executable('ag')
	let g:ackprg = 'ag --vimgrep'
endif
" key binding to ack.vim
nnoremap <Leader>fs :call AckSearch("")<left><left>

"let g:ale_fix_on_save = 1

" color themes
if ! has('gui_running')
    set t_Co=256
    set background=dark
    colorscheme solarized
endif

let g:lightline = {
      \ 'colorscheme': 'solarized',
      \ 'component': {
      \   'readonly': '%{&readonly?"":""}',
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
      \ }

" F5 to run c/cpp/java/python
map <F5> :call CompileRun()<CR>
func! CompileRun()
exec "w"
if expand('%:e') == "c"
    exec "!gcc % -o %<.c&&./%<.c"
elseif expand('%:e') == "cpp" || expand('%:e') == "cc"
    exec "!g++ -std=c++11 % -o %<&& ./%< && rm %<" 
elseif expand('%:e') == "java"
    exec "!javac %&&java %:r"
elseif expand('%:e') == "py"
    exec "!python %"
endif
endfun
