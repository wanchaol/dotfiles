" general config
set nocompatible
set ignorecase
set smartcase
set tabstop=4
set shiftwidth=4
set expandtab
set smarttab
set autoindent
set smartindent
set wrap                      "自动折行
set nu
set incsearch
set hlsearch
set showmatch
set cursorline

" set mouse and hover
set mouse=a
set selection=exclusive
set selectmode=mouse,key
map <s-tab> :bnext<cr>
map <c-tab> :tabNext<cr>
set nobackup
set noswapfile

set backspace=indent,eol,start  " more powerful backspacing

" share the clipboard with sys
set clipboard+=unnamed

"set paste

set laststatus=2
set encoding=utf-8

" allow switch buffer without saving if there's changes
set hidden
" allow auto reload of files when some changes on disk (like git checkout)
set autoread
au CursorHold,CursorMoved * checktime
au FocusGained,BufEnter * checktime

syntax on
" fix syntax hightlight problem on large files
" http://vim.wikia.com/wiki/Fix_syntax_highlighting
autocmd BufEnter * :syntax sync fromstart
set redrawtime=10000

" vim code folding
set foldmethod=indent
" disable initial folding
set nofoldenable            " ... but have folds open by default


" set leaderkey
let mapleader=" "

call plug#begin('~/.vim/plugged')
Plug 'ervandew/supertab'
Plug 'scrooloose/nerdcommenter'

Plug 'ericcurtin/CurtineIncSw.vim'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'sheerun/vim-polyglot'

Plug 'w0rp/ale'
Plug 'majutsushi/tagbar'

Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'jlanzarotta/bufexplorer'

Plug 'joshdick/onedark.vim'

Plug 'nathanaelkane/vim-indent-guides'
Plug 'mhinz/vim-startify'
Plug 'itchyny/lightline.vim'
Plug 'zefei/vim-wintabs'
Plug 'zefei/vim-wintabs-powerline'

Plug 'terryma/vim-multiple-cursors'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
Plug 'junegunn/fzf.vim'
Plug 'mhinz/vim-grepper'

Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-surround'

" git
Plug 'tpope/vim-fugitive'
Plug 'gregsexton/gitv', {'on': ['Gitv']}

" markdown
Plug 'gabrielelana/vim-markdown'

call plug#end()


" assuming you want to use ultisnips snippet engine
let g:UltiSnipsSnippetDirectories=['UltiSnips']
let g:UltiSnipsEditSplit="vertical"
" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" cpp file indent local config
autocmd Filetype c,cpp,cc,h,hpp setlocal expandtab tabstop=2 shiftwidth=2
" vim-clang-format config

" Nerdtree settings
" configure the nerdtree window
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree
nnoremap <Leader>ft :NERDTreeFind<CR>

" don't change to dir base on file open
let g:startify_change_to_dir = 0
let g:startify_bookmarks = [ '~/pytorch'  ]

" automatically load a session if cur dir in bootmark
let g:startify_session_autoload = 1
" let SLoad automatically restore the last session used, combined with tmux
let g:startify_session_persistence = 1
"let g:startify_files_number = 20

let g:bufExplorerSortBy='number'

" navigation config
nnoremap <Leader>ff :Files<CR>
nnoremap <Leader>fb :ToggleBufExplorer<CR>
nnoremap <Leader>fh :History<CR>


" vim grepper config
nnoremap <leader>gg :Grepper -tool git<cr>
nnoremap <leader>ga :Grepper -tool ag<cr>
nnoremap <leader>gs :Grepper -tool ag -side<cr>
nnoremap <leader>*  :Grepper -tool ag -cword -noprompt<cr>

nmap gs <plug>(GrepperOperator)
xmap gs <plug>(GrepperOperator)

runtime plugin/grepper.vim
let g:grepper.ag.grepprg .= ' --noaffinity'



" markdown config
let g:markdown_enable_conceal = 1

" color themes
if ! has('gui_running')
    set t_Co=256
    "set background=dark
    "colorscheme solarized
    " set Vim-specific sequences for RGB colors
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum""]"

    " onedark config
    if (has("termguicolors"))
        set termguicolors
    endif
    colorscheme onedark
endif

" tagbar config
nmap <F8> :TagbarToggle<CR>

" lightline and bufferline config
let g:lightline = {
      \ 'colorscheme': 'onedark',
      \ 'active': {
      \   'left': [ [ 'mode'],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ],
      \             ['tagbar']]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head'
      \ },
      \ 'component': {
      \   'tagbar': '%{tagbar#currenttag("[%s]", "", "f")}',
      \ },
      \}

nmap <Leader>1 <Plug>(wintabs_tab_1)
nmap <Leader>2 <Plug>(wintabs_tab_2)
nmap <Leader>3 <Plug>(wintabs_tab_3)
nmap <Leader>4 <Plug>(wintabs_tab_4)
nmap <Leader>5 <Plug>(wintabs_tab_5)
nmap <Leader>6 <Plug>(wintabs_tab_6)
nmap <Leader>7 <Plug>(wintabs_tab_7)
nmap <Leader>8 <Plug>(wintabs_tab_8)
nmap <Leader>9 <Plug>(wintabs_tab_9)
nmap <C-H> <Plug>(wintabs_previous)
nmap <C-L> <Plug>(wintabs_next)
nmap <C-K> <Plug>(wintabs_close)


" lint and ale config
"let g:ale_set_balloons=1
set balloonevalterm
let g:ale_set_balloons=1

let g:ale_cpp_cquery_executable="/usr/local/bin/cquery"
let g:ale_cpp_cquery_cache_directory="/tmp/cquery"

let g:ale_linters = {
\   'python': ['flake8', 'pyls'],
\   'cpp': ['cquery', 'clangtidy'],
\}

let g:ale_linters_ignore = {
\   'python': ['pyls'],
\}

"let g:ale_fixers = {
"\   '*': ['remove_trailing_lines', 'trim_whitespace'],
"\}

let g:ale_fix_on_save = 1
let g:ale_close_preview_on_insert=1

let g:ale_completion_enabled = 1
let g:ale_completion_max_suggestions=10
let g:SuperTabDefaultCompletionType = '<C-n>'
noremap <leader>jd :ALEGoToDefinition<CR>
noremap <leader>jr :ALEFindReferences<CR>
nnoremap <silent> K :ALEHover<CR>


" source header file switch keymap
map <F2> :call CurtineIncSw()<CR>

" Indent guidelines color
let indent_guides_auto_colors = 0
"let indent_guides_guide_size = 1
au VimEnter,Colorscheme * hi! IndentGuidesOdd  ctermfg=8 ctermbg=8
au VimEnter,Colorscheme * hi! IndentGuidesEven ctermfg=8 ctermbg=0

" F5 to run c/cpp/java/python
map <F5> :call CompileRun()<CR>
func! CompileRun()
exec "w"
if expand('%:e') == "c"
    exec "!gcc % -o %<.c&&./%<.c"
elseif expand('%:e') == "cpp" || expand('%:e') == "cc"
    exec "!g++ -std=c++11 % -o %<&& ./%< && rm %<"
elseif expand('%:e') == "java"
    exec "!javac %&&java %:r"
elseif expand('%:e') == "py"
    exec "!python %"
endif
endfun
