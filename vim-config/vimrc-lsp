" general config
set nocompatible
set ignorecase
set smartcase
set tabstop=4
set shiftwidth=4
set expandtab
set smarttab
set autoindent
set smartindent
set wrap                      "自动折行
set nu
set incsearch
set hlsearch
set showmatch
set mouse=a
" set selection=exclusive
set selection=inclusive
set selectmode=mouse,key
map <s-tab> :bnext<cr>
map <c-tab> :tabNext<cr>
set nobackup
set noswapfile
" share the clipboard with sys
set clipboard+=unnamed

set laststatus=2
set encoding=utf-8 

" don't show mode in the cmd, to support echodoc
set noshowmode
" allow switch buffer without saving if there's changes
set hidden
" allow auto reload of files when some changes on disk (like git checkout)
set autoread
au CursorHold,CursorMoved * checktime
au FocusGained,BufEnter * checktime

syntax on
" fix syntax hightlight problem on large files
" http://vim.wikia.com/wiki/Fix_syntax_highlighting
autocmd BufEnter * :syntax sync fromstart
set redrawtime=10000


" set leaderkey
let mapleader=" "

call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdcommenter'

Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete-lsp.vim'

Plug 'ervandew/supertab'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'Shougo/echodoc.vim'
Plug 'octol/vim-cpp-enhanced-highlight'

Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'jlanzarotta/bufexplorer'
Plug 'tpope/vim-fugitive'

Plug 'altercation/vim-colors-solarized'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'mhinz/vim-startify'
Plug 'itchyny/lightline.vim'

Plug 'terryma/vim-multiple-cursors'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
Plug 'junegunn/fzf.vim'
Plug 'mileszs/ack.vim'

Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-surround'

call plug#end()

" <language server config>
let g:lsp_log_file = expand('/tmp/vim-lsp.log')
nnoremap <leader>jd :LspDefinition<CR>
nnoremap <leader>jr :LspReferences<CR>
nnoremap <f2>jr :LspRename<CR>

" Autocomplete for lsp
let g:lsp_async_completion=1
imap <c-space> <Plug>(asyncomplete_force_refresh)
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
"inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>\<cr>" : "\<cr>"
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

" Hover (type info) settings
let &previewheight=5

" python
if executable('pyls')
    " pip install python-language-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'whitelist': ['python'],
        \ })
endif

" c++
if executable('cquery')
   au User lsp_setup call lsp#register_server({
      \ 'name': 'cquery',
      \ 'cmd': {server_info->['cquery']},
      \ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'compile_commands.json'))},
      \ 'initialization_options': { 
      \     'cacheDirectory': '/tmp/cquery/cache',
      \     'index': {
      \         'blacklist': ['.*/build/.*', '.*/third_party/.*']
      \     },
      \     'completion': {
      \         'includeBlacklist': ['.*/build/.*', '.*/third_party/.*'],
      \         'enableSnippets': v:true,
      \     },
      \     'disableInitialIndex' : v:true,
      \     'codeLens' : {
      \         'localVariables': v:false,
      \     }
      \  },
      \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp', 'cc'],
      \ })
endif


let g:lsp_log_verbose = 1
let g:lsp_log_file = expand('~/vim-lsp.log')

" for asyncomplete.vim log
let g:asyncomplete_log_file = expand('~/asyncomplete.log')

" <language server config/>


" assuming you want to use ultisnips snippet engine
let g:UltiSnipsSnippetDirectories=['UltiSnips']
let g:UltiSnipsEditSplit="vertical"
" better key bindings for UltiSnipsExpandTrigger

let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"


let g:echodoc#enable_at_startup = 1


" cpp file indent local config 
autocmd Filetype c,cpp,cc,h,hpp setlocal expandtab tabstop=2 shiftwidth=2

" Nerdtree settings
" configure the nerdtree window
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree
nnoremap <Leader>ft :NERDTreeFind<CR>

" don't change to dir base on file open
let g:startify_change_to_dir = 0
let g:startify_bookmarks = [ '~/pytorch'  ]

" automatically load a session if cur dir in bootmark
let g:startify_session_autoload = 1
" let SLoad automatically restore the last session used, combined with tmux
let g:startify_session_persistence = 1
"let g:startify_files_number = 20

" fzf config
nnoremap <Leader>ff :Files<CR>
nnoremap <Leader>fb :ToggleBufExplorer<CR>
nnoremap <Leader>fh :History<CR>

" avoid ack output leak to terimal
function AckSearch(string) abort
  let saved_shellpipe = &shellpipe
  let &shellpipe = '>'
  try
    execute 'Ack!' shellescape(a:string, 1)
  finally
    let &shellpipe = saved_shellpipe
  endtry
endfunction

if executable('ag')
	let g:ackprg = 'ag --vimgrep'
endif
" key binding to ack.vim
nnoremap <Leader>fs :call AckSearch("")<left><left>

"let g:ale_fix_on_save = 1

" color themes
if ! has('gui_running')
    set t_Co=256
    set background=dark
    colorscheme solarized
endif

let g:lightline = {
      \ 'colorscheme': 'solarized',
      \ 'component': {
      \   'readonly': '%{&readonly?"":""}',
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
      \ }

" F5 to run c/cpp/java/python
map <F5> :call CompileRun()<CR>
func! CompileRun()
exec "w"
if expand('%:e') == "c"
    exec "!gcc % -o %<.c&&./%<.c"
elseif expand('%:e') == "cpp" || expand('%:e') == "cc"
    exec "!g++ -std=c++11 % -o %<&& ./%< && rm %<" 
elseif expand('%:e') == "java"
    exec "!javac %&&java %:r"
elseif expand('%:e') == "py"
    exec "!python %"
endif
endfun
