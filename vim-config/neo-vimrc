set nocompatible
set ignorecase
set smartcase
set shiftwidth=4
set softtabstop=4
set tabstop=4
syntax enable
syntax on
set autoindent
set smartindent
set nu
set hlsearch
set showmatch
set mouse=a
set selection=exclusive
set selectmode=mouse,key
map <s-tab> :tabnext <cr>
set nobackup
set noswapfile

filetype off

" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

let g:neocomplete#force_overwrite_completefunc = 1

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()

" neosnippet configuration
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" " SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"
"
" " For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
  endif"
" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1


" vim-clang configuration
let g:clang_auto = 0
let g:clang_close_preview = 0
" default 'longest' can not work with neocomplete
let g:clang_c_completeopt = 'menuone,preview'
let g:clang_cpp_completeopt = 'menuone,preview'

" the Omni-Completion tip window to close when a selection is made
"autocmd CompleteDone * pclose
"autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

" use neocomplete
" input patterns
"if !exists('g:neocomplete#force_omni_input_patterns')
  "let g:neocomplete#force_omni_input_patterns = {}
"endif

" for c and c++
"let g:neocomplete#force_omni_input_patterns.c =
	  "\ '[^.[:digit:] *\t]\%(\.\|->\)\w*'
"let g:neocomplete#force_omni_input_patterns.cpp =
	  "\ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'

if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif

let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'




"Nerdtree settings
let g:nerdtree_tabs_open_on_console_startup=1
let g:nerdtree_tabs_smart_startup_focus = 1
let g:nerdtree_tabs_open_on_new_tab = 1
let g:nerdtree_tabs_meaningful_tab_names = 1
let g:nerdtree_tabs_autoclose = 1
let g:nerdtree_tabs_synchronize_view = 1
let g:nerdtree_tabs_synchronize_focus = 1
let g:nerdtree_tabs_focus_on_files = 1
autocmd VimEnter * NERDTree
"autocmd VimEnter * NERDTreeMirror
"autocmd VimEnter * NERDTreeMirrorOpen
"autocmd VimEnter * NERDTreeTabsOpen
autocmd VimEnter * wincmd p

" startify configure
let g:startify_custom_header = [
            \ '	+-----------------------------------+',
            \ '	|  What hurts more, the pain of     |',
            \ '	|  hard work, or the pain of regret?|',
            \ '	+----------------+------------------+',
            \]

let g:startify_session_persistence = 1
let g:startify_session_autoload    = 1
let g:startify_enable_special      = 0
let g:startify_change_to_dir       = 0


" airline configuration
set laststatus=2
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme= 'dark'
"if has('gui_running')
	"let g:airline_theme= 'dark'
"else
	"let g:airline_theme= 'light'
"endif

" Vindle Configuration
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
     
Plugin 'gmarik/Vundle.vim'
	   
" My vim scripts
Plugin 'The-NERD-Commenter'
Plugin 'a.vim'
"Plugin 'neocomplcache'
Plugin 'Shougo/neocomplete'
Plugin 'Shougo/neosnippet'
Plugin 'Shougo/neosnippet-snippets'
"Plugin 'SirVer/ultisnips'
"Plugin 'honza/vim-snippets'
"Plugin 'Shougo/unite.vim'
"Plugin 'Shougo/vimfiler.vim'
"Plugin 'Raimondi/delimitMate'
Plugin 'jiangmiao/auto-pairs'
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'mhinz/vim-startify'
Plugin 'bling/vim-airline'
Plugin 'tpope/vim-fugitive'
Plugin 'justmao945/vim-clang'

"Plugin 'easymotion/vim-easymotion'

"colors configuration
Plugin 'flazz/vim-colorschemes'
" End my vim scripts

call vundle#end()            " required
filetype plugin indent on    " required


"color theme configuration
let g:solarized_termcolors=256
"colorscheme solarized
colorscheme molokai
